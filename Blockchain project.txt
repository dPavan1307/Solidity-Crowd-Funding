//SPDX-License-Identifier: UNLICENSED
pragma solidity >=0.5.0 < 0.9.0;

contract CrowdFunding{
      mapping(address=>uint) public contributors;
      address public manager;
      uint public minimumContribution;
      uint public deadline;
      uint public target;
      uint public raisedamount;
      uint public noofContributors;

          struct Request{
              string description;
              address payable recipient;
              uint value;
              bool completed;
              uint noofvoter;
              mapping(address=>bool) voters;
          }
          mapping(uint=>Request) public request;
          uint public numRequests;
      constructor(uint _target,uint _deadline){
           target=_target;
           deadline=block.timestamp+_deadline; //10sec+3600sec(60*60)
           minimumContribution= 100 wei;
           manager=msg.sender; 
      }
      function  sendEth() public payable{
           require(block.timestamp<deadline,"Deadline has passed");
           require(msg.value >= minimumContribution,"Minimum Contribution is not met");
           if(contributors[msg.sender]==0){
               noofContributors++;
           }
           contributors[msg.sender]+=msg.value;
           raisedamount+=msg.value;
      }
      function getContractBalanve() public view returns(uint){
          return address(this).balance;
      }
      function refund() public{
          require(block.timestamp>deadline && raisedamount<target, "You are not eligible for refund");
          require(contributors[msg.sender]>0);
          address payable user=payable(msg.sender);
          user.transfer(contributors[msg.sender]);
          contributors[msg.sender]=0;
      }
      modifier onlymanager(){
          require(msg.sender==manager," only manager can call this function");
          _;
      }
        function createRequests(string memory _description,address payable _recipient,uint _value) 
         public onlymanager{
          Request storage newRequest = request[numRequests];
          numRequests++;
          newRequest.description=_description;
          newRequest.recipient=_recipient;
          newRequest.value=_value;
          newRequest.completed=false;
          newRequest.noofvoter= 0;
      }
      function voteRequests(uint _requestNo) public{
          require(contributors[msg.sender]>0,"you must be a contributor");
          Request storage thisrequest=request[_requestNo];
          require(thisrequest.voters[msg.sender]==false,"you have already voted");
          thisrequest.voters[msg.sender]==true;
          thisrequest.noofvoter++;
      }
}